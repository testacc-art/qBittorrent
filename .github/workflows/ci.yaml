name: GitHub Actions CI

# Cache is used for all Windows and macOS dependencies (size approx. 1230 * 2 + 1850 = 4310 MiB)
# Cache is not used for Ubuntu builds, because it already has all dependencies except
# the appropriate libtorrent version, which only takes 3-5 minutes to build from source anyway

on: [pull_request, push]

env:
  VCPKG_COMMIT: 63aa65e65b9d2c08772ea15d25fb8fdb0d32e557
  VCPKG_DEST_MACOS: /Users/runner/qbt_tools/vcpkg
  VCPKG_DEST_WIN: C:\qbt_tools\vcpkg
  LIBTORRENT_VERSION_TAG: v1.2.14

jobs:

  ci_windows:
    name: Windows + vcpkg

    runs-on: windows-2019

    defaults:
      run:
        shell: pwsh

    steps:
    - name: checkout repository
      uses: actions/checkout@v2

    # - ninja is needed for building qBittorrent (because it's preferable, not a hard requirement)
    - name: install additional required packages with chocolatey
      run: |
        choco install ninja

    - name: setup vcpkg (cached, if possible)
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgDirectory: ${{ env.VCPKG_DEST_WIN }}
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
        setupOnly: true

    # Tell vcpkg to only build Release variants of the dependencies
    - name: configure vcpkg triplet overlay for release builds only
      run: |
        New-Item -Path ${{ github.workspace }} -Name "triplets_overlay" -ItemType Directory
        Copy-Item ${{ env.RUNVCPKG_VCPKG_ROOT }}/triplets/x64-windows-static.cmake `
          ${{ github.workspace }}/triplets_overlay/x64-windows-static-release.cmake
        Add-Content ${{ github.workspace }}/triplets_overlay/x64-windows-static-release.cmake `
          -Value "set(VCPKG_BUILD_TYPE release)"

    # clear buildtrees after each package installation to reduce disk space requirements
    - name: install dependencies via vcpkg
      run: |
        $packages = `
          "boost-circular-buffer:x64-windows-static-release",
          "libtorrent:x64-windows-static-release",
          "qt5-base:x64-windows-static-release",
          "qt5-svg:x64-windows-static-release",
          "qt5-tools:x64-windows-static-release",
          "qt5-winextras:x64-windows-static-release"
        ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe upgrade `
            --overlay-triplets=${{ github.workspace }}/triplets_overlay `
            --no-dry-run
        foreach($package in $packages)
        {
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe install $package `
            --overlay-triplets=${{ github.workspace }}/triplets_overlay `
            --clean-after-build
        }

    # NOTE: this is necessary to correctly find and use cl.exe with the Ninja generator for now
    - name: setup devcmd
      uses: ilammy/msvc-dev-cmd@v1

    - name: build qBittorrent
      shell: cmd
      run: |
        cmake -B build -G "Ninja" ^
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo ^
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_DEST_WIN }}\scripts\buildsystems\vcpkg.cmake ^
          -DVCPKG_TARGET_TRIPLET=x64-windows-static-release ^
          -DVERBOSE_CONFIGURE=ON ^
          -DMSVC_RUNTIME_DYNAMIC=OFF ^
          --graphviz=build\target_graph.dot
        cmake --build build

    - name: upload artifact as zip
      uses: actions/upload-artifact@v2
      with:
        name: qBittorrent-CI_Windows-x64
        path: |
          build/compile_commands.json
          build/target_graph.dot
          build/qbittorrent.exe
          build/qbittorrent.pdb
          dist/windows/qt.conf
